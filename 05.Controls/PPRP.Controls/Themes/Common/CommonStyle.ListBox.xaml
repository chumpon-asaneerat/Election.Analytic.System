<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    mc:Ignorable="PresentationOptions">
    <ResourceDictionary.MergedDictionaries>
        <!--  Force Merge related resource dictionary  -->
        <ResourceDictionary Source="pack://application:,,,/PPRP.Controls;component/Themes/CommonStyle.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!--  CONST LISTBOX ITEM SIZE  -->
    <GridLength x:Key="GridListBoxItemWidth">250</GridLength>
    <GridLength x:Key="GridListBoxItemHeight">150</GridLength>

    <sys:Double x:Key="ListBoxItemWidth" PresentationOptions:Freeze="True">250</sys:Double>
    <sys:Double x:Key="ListBoxItemHeight" PresentationOptions:Freeze="True">150</sys:Double>

    <!--  CONST LISTBOX COLORS  -->
    <SolidColorBrush x:Key="ListBoxItemSelectedBorderBrush"
                     PresentationOptions:Freeze="True"
                     Color="DarkOrange" />
    <SolidColorBrush x:Key="ListBoxItemSelectedBackground"
                     PresentationOptions:Freeze="True"
                     Color="Orange" />
    <SolidColorBrush x:Key="ListBoxItemSelectedForground"
                     PresentationOptions:Freeze="True"
                     Color="WhiteSmoke" />

    <!--  BASE LISTBOX STYLES  -->
    <Style x:Key="BASEListBox" TargetType="{x:Type ListBox}">
        <!--  Common  -->
        <Setter Property="FontSize" Value="{StaticResource FontSize18}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <!--  Synchronized  -->
        <Setter Property="IsSynchronizedWithCurrentItem" Value="True" />
        <!--  VirtualizingPanel  -->
        <Setter Property="VirtualizingPanel.IsVirtualizing" Value="True" />
        <Setter Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="True" />
        <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling" />
    </Style>

    <!--  NORMAL LISTBOX STYLES  -->
    <Style x:Key="SingleSelectListBox"
           BasedOn="{StaticResource BASEListBox}"
           TargetType="ListView">
        <Setter Property="SelectionMode" Value="Single" />
    </Style>

    <Style x:Key="MultiSelectListBox"
           BasedOn="{StaticResource BASEListBox}"
           TargetType="ListBox">
        <Setter Property="SelectionMode" Value="Multiple" />
    </Style>

    <Style x:Key="ExtendedSelectListBox"
           BasedOn="{StaticResource BASEListBox}"
           TargetType="ListBox">
        <Setter Property="SelectionMode" Value="Extended" />
    </Style>

    <!--  WRAP LISTBOX STYLES  -->
    <Style x:Key="BASEWrapListBox"
           BasedOn="{StaticResource BASEListBox}"
           TargetType="{x:Type ListBox}">
        <!--  Swap out the default items panel with a WrapPanel so that the images will be arranged with a different layout.  -->
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <!--  Set this attached property to 'Disabled' so that the ScrollViewer in the ListBox will never show a horizontal scrollbar, and the WrapPanel it contains will be constrained to the width of the ScrollViewer's viewable surface.  -->
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    </Style>

    <Style x:Key="SingleSelectWrapListBox"
           BasedOn="{StaticResource BASEWrapListBox}"
           TargetType="ListBox">
        <Setter Property="SelectionMode" Value="Single" />
    </Style>

    <Style x:Key="MultiSelectWrapListBox"
           BasedOn="{StaticResource BASEWrapListBox}"
           TargetType="ListBox">
        <Setter Property="SelectionMode" Value="Multiple" />
    </Style>

    <Style x:Key="ExtendedSelectWrapListBox"
           BasedOn="{StaticResource BASEWrapListBox}"
           TargetType="ListBox">
        <Setter Property="SelectionMode" Value="Extended" />
    </Style>

    <!--  BASE LISTBOX ITEM CONTAINER STYLES  -->
    <Style x:Key="BASEListBoxItemContainer" TargetType="{x:Type ListBoxItem}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <!--
        <Setter Property="IsSelected" Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=DataContext.IsSelected}" />
        -->
        <Setter Property="MaxWidth" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualWidth}" />
        <Setter Property="MaxHeight" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ActualHeight}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                        <Border Name="item_border"
                                Margin="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                BorderThickness="1"
                                CornerRadius="12">
                            <ContentPresenter Margin="2"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <!--  TOPMOST BORDER FOR SELECTION  -->
                        <!--  Need to set IsHitTestVisible to false for let mouse passthrough  -->
                        <Border Name="item_select_cover"
                                Margin="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Background="{DynamicResource ListBoxItemSelectedBackground}"
                                BorderThickness="0"
                                CornerRadius="12"
                                IsHitTestVisible="False"
                                Opacity=".1"
                                Visibility="Hidden" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter TargetName="item_border" Property="BorderBrush" Value="{DynamicResource ListBoxItemSelectedBorderBrush}" />
                            <Setter TargetName="item_select_cover" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <!--
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" Value="True">
                            <Setter TargetName="item_border" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  WRAP LISTBOX ITEM STYLES  -->
    <!--    # WRAP LISTBOX ITEM STYLES - USER CARD ITEM:DATA TEMPLATE (UNUSED) -->
    <DataTemplate x:Key="UserCardItem">
        <Grid Margin="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="{DynamicResource GridListBoxItemWidth}" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="30" />
                <RowDefinition Height="90" />
                <RowDefinition Height="30" />
            </Grid.RowDefinitions>
            <Border x:Name="container_background"
                    Grid.Row="0"
                    Grid.RowSpan="3"
                    Grid.Column="0"
                    Width="{DynamicResource ListBoxItemWidth}"
                    Height="{DynamicResource ListBoxItemHeight}"
                    Background="{DynamicResource BlackCard}"
                    CornerRadius="1" />
            <!--  UserId and Full Name  -->
            <StackPanel Grid.Row="1"
                        Grid.Column="0"
                        Margin="20,20,0,0"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Orientation="Vertical">
                <TextBlock FontSize="{DynamicResource FontSize18}"
                           FontWeight="Bold"
                           Text="{Binding UserId}" />
                <TextBlock FontSize="{DynamicResource FontSize14}" Text="{Binding FullNameTH}" />
                <Grid Height="2" />
            </StackPanel>
            <!--  Role Name  -->
            <TextBlock Grid.Row="2"
                       Grid.Column="0"
                       Margin="0,2,0,0"
                       FontSize="{DynamicResource FontSize14}"
                       FontWeight="Bold"
                       Foreground="WhiteSmoke"
                       Text="{Binding RoleNameTH}"
                       TextAlignment="Center" />
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=RoleId}" Value="ADMINS">
                <Setter TargetName="container_background" Property="Background" Value="{DynamicResource PurpleCard}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=RoleId}" Value="ACCOUNT">
                <Setter TargetName="container_background" Property="Background" Value="{DynamicResource RedCard}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=RoleId}" Value="TC">
                <Setter TargetName="container_background" Property="Background" Value="{DynamicResource BlueCard}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=RoleId}" Value="CTC">
                <Setter TargetName="container_background" Property="Background" Value="{DynamicResource GreenCard}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>